<!DOCTYPE html>
<html>
  <head>
    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type' />
  </head>
  <body>
    <h1>Offers Importer</h1>
    <input id="import" type="file"/></br></br>
    <button onclick="loadFile()">Import Offer</button>
    <h1>Locked Assignments Importer</h1>
    <button onclick="importAssignments()">Import Locked Assignments</button>
    <h1>Offers</h1>
    <form method="post">
      <input type="button" value="Send Contract" onclick="send_contract()">
      <input type="button" value="Email" onclick="email()">
      <input type="button" value="Set as HR-Processed" onclick="hr_processed()">
      <input type="button" value="Set as DDAH-accepted" onclick="ddah_accepted()">
      <table>
        <tr>
          <th>Select</th>
          <th>Decision Link</th>
          <th>Last Name</th>
          <th>First Name</th>
          <th>Student Number</th>
          <th>Position</th>
          <th>Hours</th>
          <th>Sent</th>
          <th>Status</th>
          <th>HR status</th>
          <th>DDAH status</th>
        </tr>
        <% @offers.each do |o| %>
          <tr>
            <th><input type="checkbox" onclick="updateOfferSelected(this, <%=o[:id] %>, '<%=o[:applicant][:email]%>');"></th>
            <th><a href="offers/<%=o[:id] %>/pdf">Link</a></th>
            <th><%= o[:applicant][:last_name]%></th>
            <th><%= o[:applicant][:first_name]%></th>
            <th><%= o[:applicant][:student_number]%></th>
            <th><%= o[:position]%></th>
            <th><%= o[:hours]%></th>
            <th><%= o[:status]!="Unsent" %></th>
            <th><%= o[:status]%></th>
            <th><%= o[:hr_status]? o[:hr_status]: "n/a"%></th>
            <th><%= o[:ddah_status]? o[:ddah_status]: "n/a"%></th>
          </tr>
        <% end %>
      </table>
    </form>
    <h1>Contracts</h1>
    <form method="post">
      <input type="button" value="Nag" onclick="nag()">
      <input type="button" value="Print Contracts" onclick="print()">
      <table style="margin-top: 10px;">
        <tr style="text-align: left;">
          <th>Select</th>
          <th>File</th>
          <th>Last Name</th>
          <th>First Name</th>
          <th>Student Number</th>
          <th>Position</th>
          <th>Status</th>
          <th>Action</th>
          <th>Contract Send Date</th>
          <th>Deadline</th>
          <th>Nag Count</th>
          <th>Print Date</th>
        </tr>
        <% @offers.each do |c| %>
          <% if c[:send_date] %>
            <tr>
              <th><input type="checkbox" onclick="updateContractSelected(this, <%=c[:id] %>);"></th>
              <th><button type="button" onclick="showContract(<%=c[:id] %>)">Contract</button></th>
              <th><%= c[:applicant][:last_name]%></th>
              <th><%= c[:applicant][:first_name]%></th>
              <th><%= c[:applicant][:student_number]%></th>
              <th><%= c[:position]%></th>
              <th><%= c[:status]%></th>
              <th><button type="button" onclick="withdraw(<%= c[:id]%>, '<%=c[:status]%>')">Withdraw</button></th>
              <th><%= (c[:updated_at].in_time_zone('Eastern Time (US & Canada)')).strftime("%B %e, %Y") %></th>
              <th><%= c[:deadline]? ((c[:deadline].in_time_zone('Eastern Time (US & Canada)')).strftime("%B %e, %Y")):"" %></th>
              <th><%= c[:nag_count]%></th>
              <th><%= c[:print_time]? c[:print_time]: "n/a"%></th>
            </tr>
          <% end %>
        <% end %>
      </table>
    </form>
    <h1>Sessions</h1>
    <ul>
      <% @sessions.each do |s| %>
        <li>
          <h2><%= s[:semester] %> <%= s[:year] %></h2>
          <p>Start Date: <%= (Date.parse s[:start_date]).strftime("%B %e, %Y") %></p>
          <p>End Date: <%= (Date.parse s[:end_date]).strftime("%B %e, %Y") %></p>
          <p>Pay: <input type="number" value="<%= "%.2f" % s[:pay]%>" step="0.01" min="0.00" onblur="updateSession(this, <%=s[:id]%>)"/></p>
        </li>
      <% end %>
    </ul>
    <script>
      contract_selected = [];
      offer_selected = [];
      email_selected = [];
      function updateContractSelected(checkbox, val){
        if (checkbox.checked)
          contract_selected.push(val)
        else
          contract_selected.splice(contract_selected.indexOf(val),1);
      }
      function updateOfferSelected(checkbox, val, email){
        if (checkbox.checked){
          offer_selected.push(val);
          email_selected.push(email);
        }
        else{
          offer_selected.splice(offer_selected.indexOf(val),1);
          email_selected.splice(email_selected.indexOf(email),1);
        }
      }
      function fetchHelper(url, init, message, file, print){
        fetch(url, init).then(function(response) {
          if (response.status==204){
            return {message: message};
          }
          else{
            if (file){
              return response.blob();
            }
            else{
              return response.json();
            }
          }
        }).then(function(response){
          if (file){
            let fileURL = URL.createObjectURL(response);
            if (print){
              pdf = window.open(fileURL);
              pdf.document.onload= pdf.print();
            }
            else{
              window.location= fileURL;
            }
          }
          else{
            location.reload();
            alert(response.message);
          }
        })
      }
      function postHelper(url, data, message="", file=false, print= false){
        let init = {
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json; charset=utf-8',
            },
            method: 'POST',
            body: JSON.stringify(data)
        };
        fetchHelper(url, init, message,file, print);
      }
      function putHelper(url, data, message="", file=false, print = false){
        let init = {
            headers: {
                'Content-Type': 'application/json; charset=utf-8',
            },
            method: 'PUT',
            body: JSON.stringify(data),
        };
        fetchHelper(url, init, message,file);
      }
      function importAssignments(){
        postHelper("/import/locked-assignments", {}, "Offers Imported")
      }
      function send_contract(){
        postHelper("/offers/send-contracts", {offers: offer_selected})
      }
      function email(){
        var a = document.createElement('A');
        a.href = "mailto:"+email_selected.join(";");
        a.click();
      }
      function hr_processed(){
        putHelper("/offers/batch-update", {offers:offer_selected, hr_status: "Processed"}, "HR status updated")
      }
      function ddah_accepted(){
        putHelper("/offers/batch-update", {offers:offer_selected, ddah_status: "Accepted"}, "DDAH status updated")
      }
      function nag(){
        postHelper("/offers/nag", {contracts:contract_selected}, "")
      }
      function print(){
        postHelper("/offers/print", {contracts:contract_selected, update: true}, "", true, true)
      }
      function showContract(id){
        postHelper("/offers/print", {contracts: [id], update: false}, "", true)
      }
      function updateSession(input, id){
        let data = {pay: input.value};
        let init = {
            headers: {
                'Content-Type': 'application/json; charset=utf-8',
            },
            method: 'PUT',
            body: JSON.stringify(data)
        };
        fetchHelper("/sessions/"+id, init, "Pay updated");
      }
      function withdraw(id, status){
        if(status=="Pending"){
          postHelper("/offers/"+id+"/decision/withdraw", {});
        }
        else{
          alert("Error: you can't change the status of this contract. It's already been "+status.toLowerCase()+".");
        }
      }
      function loadFile() {
          let files = document.getElementById('import').files;
          if (files.length > 0) {
              let message =
                  'Are you sure you want to import "' + files[0].name + '" into the database?';
              if (files[0].type == 'application/json') {
                  if (confirm(message)) {
                      uploadFile(files[0]);
                  }
              } else {
                  alert('Error: The file you uploaded is not a JSON.');
              }
          } else {
              alert('Error: No file chosen.');
          }
      }

      function uploadFile(file) {
          let reader = new FileReader();
          reader.onload = function(event) {
              let data = JSON.parse(event.target.result);

              if (data['offers'] !== undefined) {
                  data = { chass_offers: data };
                  postHelper("/import/offers", data, "Offers Imported");
              } else {
                  alert("Error: This is not Chass Offers JSON.")
              }
          };
          reader.readAsText(file);
      }

    </script>
  </body>
</html>
